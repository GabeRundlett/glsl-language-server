diff --git a/.gitignore b/.gitignore
index 7048e39..e38686a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -68,6 +68,7 @@
 # Gradle
 .idea/**/gradle.xml
 .idea/**/libraries
+build/
 
 # Gradle and Maven with auto-import
 # When using Gradle or Maven with auto-import, you should exclude module files,
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8def30a..e7e0d2e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,7 +42,7 @@ option_if_not_defined(LSPCPP_BUILD_WEBSOCKETS "Build websocket server" ON)
 option_if_not_defined(LSPCPP_ASAN "Build lsp with address sanitizer" OFF)
 option_if_not_defined(LSPCPP_MSAN "Build lsp with memory sanitizer" OFF)
 option_if_not_defined(LSPCPP_TSAN "Build lsp with thread sanitizer" OFF)
-option_if_not_defined(LSPCPP_INSTALL "Create lsp install target" OFF)
+option_if_not_defined(LSPCPP_INSTALL "Create lsp install target" ON)
 
 ###########################################################
 # Directories
@@ -94,15 +94,15 @@ function(lspcpp_set_target_options target)
 
     set_property(TARGET ${target} PROPERTY CXX_EXTENSIONS OFF)
 
-    if (CMAKE_GENERATOR MATCHES "Visual Studio.*")
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_chrono-vc141 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_date_time-vc141 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_filesystem-vc141 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_program_options-vc141 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_system-vc141 1.76.0.0)
-        lspcpp_set_target_options_with_nuget_pkg(${target} boost_thread-vc141 1.76.0.0)
-    endif()
+    # if (CMAKE_GENERATOR MATCHES "Visual Studio.*")
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_chrono-vc141 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_date_time-vc141 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_filesystem-vc141 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_program_options-vc141 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_system-vc141 1.76.0.0)
+    #     lspcpp_set_target_options_with_nuget_pkg(${target} boost_thread-vc141 1.76.0.0)
+    # endif()
 
     # Enable all warnings
     if(MSVC)
@@ -166,23 +166,13 @@ add_subdirectory(third_party/uri)
 ###########################################################
 # boost library
 ###########################################################
-if (CMAKE_GENERATOR MATCHES "Visual Studio.*")
-    INSTALL_NUGET(boost 1.76.0.0)
-    INSTALL_NUGET(boost_chrono-vc141 1.76.0.0)
-    INSTALL_NUGET(boost_date_time-vc141 1.76.0.0)
-    INSTALL_NUGET(boost_filesystem-vc141 1.76.0.0)
-    INSTALL_NUGET(boost_program_options-vc141 1.76.0.0)
-    INSTALL_NUGET(boost_system-vc141 1.76.0.0)
-    INSTALL_NUGET(boost_thread-vc141 1.76.0.0)
-else()
-
-    find_package(Boost COMPONENTS date_time  chrono filesystem system thread program_options)
-    if(NOT Boost_FOUND)
-        if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-            message(FATAL_ERROR "Can't find boost,lease build boost and install it or install boost with : brew install boost")
-        elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-            message(FATAL_ERROR "Can't find boost,please build boost and install it. or install boost with : sudo apt-get install libboost-dev")
-        endif()
+
+find_package(Boost COMPONENTS date_time chrono system thread program_options)
+if(NOT Boost_FOUND)
+    if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+        message(FATAL_ERROR "Can't find boost,lease build boost and install it or install boost with : brew install boost")
+    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
+        message(FATAL_ERROR "Can't find boost,please build boost and install it. or install boost with : sudo apt-get install libboost-dev")
     endif()
 endif()
 
@@ -190,42 +180,46 @@ endif()
 ###########################################################
 # JSON library
 ###########################################################
-if(USE_SYSTEM_RAPIDJSON)
-    set(RapidJSON_MIN_VERSION "1.1.0")
-    find_package(RapidJSON ${RapidJSON_MIN_VERSION} QUIET)
-    if(NOT DEFINED RapidJSON_INCLUDE_DIRS AND DEFINED RAPIDJSON_INCLUDE_DIRS)
-        set(RapidJSON_INCLUDE_DIRS "${RAPIDJSON_INCLUDE_DIRS}")
-    endif()
-endif()
-if(NOT RapidJSON_FOUND)
-    if(EXISTS "${PROJECT_SOURCE_DIR}/third_party/rapidjson/include")
-        message(STATUS "Using local RapidJSON")
-        set(RapidJSON_INCLUDE_DIRS third_party/rapidjson/include)
-    else()
-        message(STATUS "Please initialize rapidJSON git submodule as currently installed version is to old:")
-        message(STATUS "git submodule init && git submodule update")
-        message(FATAL_ERROR "RapidJSON version is likely too old.")
-    endif()
-endif()
-
+# if(USE_SYSTEM_RAPIDJSON)
+#     set(RapidJSON_MIN_VERSION "1.1.0")
+#     find_package(RapidJSON ${RapidJSON_MIN_VERSION} QUIET)
+#     if(NOT DEFINED RapidJSON_INCLUDE_DIRS AND DEFINED RAPIDJSON_INCLUDE_DIRS)
+#         set(RapidJSON_INCLUDE_DIRS "${RAPIDJSON_INCLUDE_DIRS}")
+#     endif()
+# endif()
+# if(NOT RapidJSON_FOUND)
+#     if(EXISTS "${PROJECT_SOURCE_DIR}/third_party/rapidjson/include")
+#         message(STATUS "Using local RapidJSON")
+#         set(RapidJSON_INCLUDE_DIRS third_party/rapidjson/include)
+#     else()
+#         message(STATUS "Please initialize rapidJSON git submodule as currently installed version is to old:")
+#         message(STATUS "git submodule init && git submodule update")
+#         message(FATAL_ERROR "RapidJSON version is likely too old.")
+#     endif()
+# endif()
+find_package(RapidJSON CONFIG REQUIRED)
 
 ###########################################################
 # Targets
 ###########################################################
 
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
+
 # lsp
 add_library(lspcpp STATIC)
 
 ### Includes
 target_include_directories(lspcpp
         PUBLIC
-            ${LSPCPP_INCLUDE_DIR}
-            ${Boost_INCLUDE_DIRS}
-            ${RapidJSON_INCLUDE_DIRS}
-            ${Uri_SOURCE_DIR}/include
+            $<BUILD_INTERFACE:${LSPCPP_INCLUDE_DIR}>
+            $<BUILD_INTERFACE:${Boost_INCLUDE_DIRS}>
+            $<BUILD_INTERFACE:${Uri_SOURCE_DIR}/include>
+            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
         )
 
-target_link_libraries(lspcpp PUBLIC network-uri  ${Boost_LIBRARIES})
+target_link_libraries(lspcpp PUBLIC network-uri rapidjson ${Boost_LIBRARIES})
+target_compile_features(lspcpp PRIVATE cxx_std_17)
 
 set(LSPCPP_THIRD_PARTY_DIR_LIST
         ${LSPCPP_THIRD_PARTY_DIR}/utfcpp/source
@@ -285,26 +279,28 @@ set_target_properties(lspcpp PROPERTIES POSITION_INDEPENDENT_CODE 1)
 
 # install
 if(LSPCPP_INSTALL)
-    include(GNUInstallDirs)
-
-    install(DIRECTORY ${LSPCPP_INCLUDE_DIR}/LibLsp
-            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-            USE_SOURCE_PERMISSIONS
-            )
-
-    install(TARGETS lspcpp
-            EXPORT lspcpp-targets
-            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-            )
-
-    install(EXPORT lspcpp-targets
-            FILE lspcpp-config.cmake
-            NAMESPACE lspcpp::
-            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/lspcpp
-            )
+    file(WRITE ${CMAKE_BINARY_DIR}/config.cmake.in [=[
+    @PACKAGE_INIT@
+    include(${CMAKE_CURRENT_LIST_DIR}/lspcpp-targets.cmake)
+    find_package(RapidJSON CONFIG REQUIRED)
+    ]=])
+    configure_package_config_file(${CMAKE_BINARY_DIR}/config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/lspcpp-config.cmake
+        INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/lspcpp
+        NO_SET_AND_CHECK_MACRO)
+    write_basic_package_version_file(
+        ${CMAKE_CURRENT_BINARY_DIR}/lspcpp-config-version.cmake
+        VERSION ${PROJECT_VERSION}
+        COMPATIBILITY SameMajorVersion)
+    install(
+        FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/lspcpp-config.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/lspcpp-config-version.cmake
+        DESTINATION
+        ${CMAKE_INSTALL_DATADIR}/lspcpp)
+    install(TARGETS lspcpp EXPORT lspcpp-targets)
+    install(EXPORT lspcpp-targets DESTINATION ${CMAKE_INSTALL_DATADIR}/lspcpp NAMESPACE lspcpp::)
+    install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ TYPE INCLUDE)
 endif()
 
 # examples
diff --git a/examples/StdIOClientExample.cpp b/examples/StdIOClientExample.cpp
index 7683808..0805ef6 100644
--- a/examples/StdIOClientExample.cpp
+++ b/examples/StdIOClientExample.cpp
@@ -18,7 +18,7 @@
 #include "LibLsp/lsp/textDocument/document_symbol.h"
 #include "LibLsp/lsp/workspace/execute_command.h"
 #include <boost/process.hpp>
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/asio.hpp>
 #include <iostream>
 
diff --git a/examples/StdIOServerExample.cpp b/examples/StdIOServerExample.cpp
index 8b2d2b2..56dae50 100644
--- a/examples/StdIOServerExample.cpp
+++ b/examples/StdIOServerExample.cpp
@@ -17,7 +17,7 @@
 #include "LibLsp/lsp/textDocument/document_symbol.h"
 #include "LibLsp/lsp/workspace/execute_command.h"
 #include <boost/process.hpp>
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/asio.hpp>
 #include <iostream>
 #include <thread>
diff --git a/examples/TcpServerExample.cpp b/examples/TcpServerExample.cpp
index 37a4266..804cb3b 100644
--- a/examples/TcpServerExample.cpp
+++ b/examples/TcpServerExample.cpp
@@ -16,7 +16,7 @@
 #include "LibLsp/lsp/textDocument/document_symbol.h"
 #include "LibLsp/lsp/workspace/execute_command.h"
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/asio.hpp>
 #include <iostream>
 #include <thread>
diff --git a/examples/WebsocketExample.cpp b/examples/WebsocketExample.cpp
index b0474bc..b56096d 100644
--- a/examples/WebsocketExample.cpp
+++ b/examples/WebsocketExample.cpp
@@ -15,7 +15,7 @@
 #include "LibLsp/lsp/textDocument/document_symbol.h"
 #include "LibLsp/lsp/workspace/execute_command.h"
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/asio.hpp>
 #include <iostream>
 #include <boost/beast/core.hpp>
diff --git a/src/lsp/ParentProcessWatcher.cpp b/src/lsp/ParentProcessWatcher.cpp
index 02c61e6..495e050 100644
--- a/src/lsp/ParentProcessWatcher.cpp
+++ b/src/lsp/ParentProcessWatcher.cpp
@@ -5,7 +5,7 @@
 #include <boost/process/windows.hpp>
 #endif
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/asio.hpp>
 #include <iostream>
 
diff --git a/src/lsp/utils.cpp b/src/lsp/utils.cpp
index f950b9e..3109ce0 100644
--- a/src/lsp/utils.cpp
+++ b/src/lsp/utils.cpp
@@ -6,6 +6,7 @@
 #include <cstring>
 #include <fstream>
 #include <functional>
+#include <filesystem>
 
 #include <queue>
 #include <sstream>
@@ -28,8 +29,6 @@
 #else
 #define ENSURE_STRING_MACRO_ARGUMENT(x) x
 #endif
-#include <boost/filesystem/path.hpp>
-#include <boost/filesystem/operations.hpp>
 #include <boost/algorithm/string.hpp>
 namespace lsp
 {
@@ -505,7 +504,7 @@ lsPosition CharPos(const  std::string& search,
 
 void scanDirsUseRecursive(const std::wstring& rootPath, std::vector<std::wstring>& ret)
 {
-        namespace fs = boost::filesystem;
+        namespace fs = std::filesystem;
         fs::path fullpath(rootPath);
         if (!fs::exists(fullpath)) { return; }
         fs::recursive_directory_iterator end_iter;
@@ -523,12 +522,12 @@ void scanDirsUseRecursive(const std::wstring& rootPath, std::vector<std::wstring
 
 void scanDirsNoRecursive(const std::wstring& rootPath, std::vector<std::wstring>& ret)
 {
-        namespace fs = boost::filesystem;
-        boost::filesystem::path myPath(rootPath);
+        namespace fs = std::filesystem;
+        std::filesystem::path myPath(rootPath);
         if (!fs::exists(rootPath)) { return; }
-        boost::filesystem::directory_iterator endIter;
-        for (boost::filesystem::directory_iterator iter(myPath); iter != endIter; iter++) {
-                if (boost::filesystem::is_directory(*iter)) {
+        std::filesystem::directory_iterator endIter;
+        for (std::filesystem::directory_iterator iter(myPath); iter != endIter; iter++) {
+                if (std::filesystem::is_directory(*iter)) {
                         ret.push_back(iter->path().wstring());
                 }
         }
@@ -538,7 +537,7 @@ void scanFilesUseRecursive(
         const std::wstring& rootPath,
         std::vector<std::wstring>& ret,
         std::wstring suf) {
-        namespace fs = boost::filesystem;
+        namespace fs = std::filesystem;
         boost::to_lower(suf);
 
         fs::path fullpath(rootPath);
diff --git a/third_party/uri/CMakeLists.txt b/third_party/uri/CMakeLists.txt
index 6863668..db90841 100644
--- a/third_party/uri/CMakeLists.txt
+++ b/third_party/uri/CMakeLists.txt
@@ -102,4 +102,4 @@ if (Uri_BUILD_DOCS)
   endif()
 endif()
 
-install(DIRECTORY include DESTINATION ".")
+install(DIRECTORY include/ TYPE INCLUDE)
\ No newline at end of file
diff --git a/third_party/uri/src/CMakeLists.txt b/third_party/uri/src/CMakeLists.txt
index d7f387c..e859f92 100644
--- a/third_party/uri/src/CMakeLists.txt
+++ b/third_party/uri/src/CMakeLists.txt
@@ -14,7 +14,7 @@ set(Uri_SRCS
   ${CMAKE_CURRENT_SOURCE_DIR}/detail/uri_resolve.cpp
   )
 
-add_library(network-uri ${Uri_SRCS})
+add_library(network-uri STATIC ${Uri_SRCS})
 target_link_libraries(network-uri)
 if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang)
   if (NOT Uri_DISABLE_LIBCXX)
@@ -27,6 +27,9 @@ set(Uri_SRCS ${Uri_SRCS} PARENT_SCOPE)
 
 install(
   TARGETS network-uri
-  ARCHIVE DESTINATION lib
-  LIBRARY DESTINATION lib
+  EXPORT lspcpp-targets
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
 )
